import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * @Description
 * @Author noel
 * @Date 2019/12/4
 * Version 1.0
 **/
public class Kmer {
    public static void main(String[] args){
        System.out.println("启动成功");
        String temp = "123asd";
        System.out.println(temp.substring(2,4));
        System.out.println(temp.length());
        generate(100, "TAACCCCCGGACGAAAAGATTGCTGGTAGAAGGAGGATTTGGTCACATTCTACTTCGCGTGATTGTTTCGGAAGTCGGGGAGATTATTCGTGCCTTTGTCCGAGTGAGATGCAAATCTGACCTTTGCCTCGAGTTAATGCCCACCCACGTACTAGCAGCACGCTCTTCACAAGATTAGCCGGCGCCGTTGCGCTCCCTATAGCAATAGGTGGGTTGGTCTCGATCCCGAGCCATATAGTGAACCGCGGTCCCGAGAAAGTAGTCGGGCAATGGTATCTCCGTACACTGCCGACTAGCCGATGGCCACAGGGTGCTGGCTGCCAGTATCGGCTAGGCACTTTATGCGTGACTAGAACGGTCTGGTTGTAGAGTAAAGGTGTTAATCCGGGACCCCTACCCCGAAACTTTTGATGGTGTTAACTGCAACCGTTCACAATCACCTTTCGGTACGGTACATGTCGGATTCTTGTATGTCCAGCGGCATTCGAGTGACTCCTTTAAGGATCTCCAAACTTAGAGGGGGGCTCGATGCACGGTCGGCTCGTGCATTGGCTCCTACTACGCCCATGTCAGTTCCAGTTCGATAGAGTCGCATGTAGAGCGCCGCACCCCGGAAGCTTTTTCAATCCCGCTTAGGCCTCTACCTAGATGTTTAATTCCGTGACCAGCGTGAAAATTATAATGTCTGTGCCACACCGACGAGTTTGCAGCAAATTGTCCTGTTCTGGGGACAAGTTAGGGGGGGCTATCCTGCGGTACTTTGGTTACGAGGTGCGTAGCCGCATTGTGTCCGGGCCATAGGGACTGCGGTCTGCTGATTCATGACGCAGAAGGGGGCCGTTAAAGGCTGAGAGTAATCGCGTGACATCGTCGCACGACGTTTTACGTCGTGACCGAATGACAGTGTGTTATGTGAACGTCGTTGTCGAGGCTGGTGCGGCGGGGTGAAATATCTTTACGACTATACTCCAGCTTGGACAGGTGCTATCCTTCATGAGCGCAGCACCCGTAGCTCTAGCAAGCGAACTCCAGGCGAGGGATCGGTGGTGACTTTTCGCAGTCAGTCATGAAATGCGCGCACTATATGCCACACAGCGGTCGATTGTTTTTCAGTGGAGTTATGCCCCGTCCTAGTCTCCGCGTGCTGATAGACCCGTCTCGGAACTGCTTAAGACGATCTCAAGCTCAATTACCCACGTCGAAGTAGATGGGACTCGTGACCCAGGAGTACGGGGATCTCCTGAACGATCGACGCTAATCAGTATCTCCCCTGAATGCTTCTCGGACGCTACAAGAATATGGTTCACTCCATGCATCCGTTTGGCGCAGATGGCGTACAAGTAACAACAGACCACATATTTGCGCTCGCAGCCCTAAGGCAAGCACACAATATTATGCCGCTCTTTGCAAATTCCCGCATGTGTGGTGTACGTTCTCTTCGAGTAGATGAACTACCAAACCCGCAGGCCCTATGTAGTGGATAAATTTAGTTACAGTAAATAGTCAGGACAAACCGCATGACTGAGGATGACATGTAGCGTTACTACCGTACCCAGCCATGATTACGACGAGAACCTAGTGTAAGACGCACAGTGCAGAAATTAAGTTCGAAGGACGTGTAAGGATATGCACTCGTAAGCGCCTCCTATTCGGGGTACTCTTTGTGCAATCCATATAAAACAGTTGGGTAGCTACGGTCGTTCCCTCGACATCACGGTAGCCCAGTATTCGCGCCGTTTCTGAATCACTTGCATACTTCCGTACTCTAGTCATCTACCCGTTTGTTAGTAAGCTGCCCCGCCGCTGATAGGAACAGCATTGCGACACCTGCCCGCAAGAGTGATCTCTCTCCCACACCGAGTTCAAAGTCCCGATGCCCCAAGCTACCTTCATTATTCTGTCCAGATAAGCAAGGCGGGGAAAACCCCCAAGGGTTATATGAACGCGCACATTGGCGTTTAGTGAACTGCTCTGTCTAATTAGGTGTAAGGGAGTCAATGCGAATCTACACCAGATTGCGGTGTGAGCCGACACATGGCGAGAAGACCCTGTTGAAACCCGGACGAGAGTCGGGGTAAAGCGCGCACTCGAAGAAATTGCGTGTCCTCAGAGAGTGGGTGTACTTTCAGCTCATTTGCCTTCGCGACACTGTGGCACACGTTCGGAACTGAGTTGACTGTTCGATTTCCCACTCGCCCCCTTTCTTTAAGCACTTTGGCGGGTGCCAGACTGTGTGACACGCACGAGCGGACGCACGCCTACGTGGTTTCCGGGGGTTTGAACGCGTTGGTTACTCCTGAAGAAAGAGTGCCAGAACTGAGCAAGACGTGCCGCCAGATTCGAACAGAACCGTGTACACCAACTCTCATTTCATAGGATATACACGCTCAGCGTAAGGTACCCGTGGCTCTAGGTTAAGGTACCGTTGTCGTGTACCCAGACTTTATGGTCGTCCTCGTTGCGGTACAGCTCCGCGCGCGAAACGATAGTGCCCGTCTTGAGCTTCTGAGCTACATTAGGGGCTAGCCCACATCGTGATGGCGCACTCCTTACGCGCTAGTGTCCTGAGGGAGGCCGCAGATAGAAAAACTTCGGACAACGCTAGAGAAGGGATGTTTCCCTGGGCAGTTATCCGAGCTGTTCGCGATACGACGGCTAGTACGATACTCCTCATTAATTGTACGGTCAGTTGGCATAAATCCTGGGGCGACTCACATAACCCGCCTAGCCTCTGTTCTACAACGAGGGCCTTCGTTGGAATCAAGTTACCTTCAACCTCATTGCATGTTCTTCTGCAAAAAGATCCTCTTATTGTACTCGTACCAGGTCTCTCAGTGTCACATACCTCACTCTGTACCAGTGTTATATCCCGGTCAAGTATCGCCAGCGATAAACTGCACAAGTCACTTAGGACCCAAGGCTAACCTACTGGGGTGGCCGTGTCACTTCAAGCCCGCTATTGAACGGTATCTCAAATGACGAGATCATCGAACATTGAATAGAAGCTATAGAAACGAATCACGGATCGAGGCAGTTTCACATACCCGGGATCAAGGGGGTCCGCAGCTAGTGTCTCATTCAAATAAACTATCGATCGCATCGCGCAGCAGCCGCCCTGCTAGATCGTTGCGTCTGCGGCTCCAGTGCGTCCGCGATACGCGACGCCTCTACAATCTGCGGGTGATAACAGCGAGGGACTACCTCACCAGGGTCACGGCTATAGTTGTTGCACATTGCGCGGATGCGAGGCTAGGATGGGATCTTTGGAAAGTTCCTTGAGGCGGTGTAACTCAACCGCGGAGTTTCTCAGATAAAGATCTCCTTACCATCGGGTAGCTTCCAGAACTAGAGCTAGCTGATTGGTCTGACTCAGCTCTGCGGCACGCGCGACGCTGGATGCGCGGGCGATATGTACCTACTTTGGTCCTGTGGGTAGACATACATTGCCGGTGTGGGTTCTACTGTACTTAATGTTGAGATAGTATAAACGATTGTGTACCTGCCACAATGTTTTTGACCTCACACCCAAAACTTGTATATCACTTTGTTGGTATTCCGCCTAAGGCCAGAAAAATCTATTGCTTAGTTTGCGTTGTGATGGACAGGCGAGCTTCTAGCATTATTCTCAGTTCCCCTCCTTGAAGACGATCGACGCGGATATTATCCTCCGAGGTTATCAACGAATCCGAAACCGATTGACGCGCAGAACATGATCAAGCAAGCGTCCCTTGTTTAACCAGCCTCCGTGTAAGATAAGATGTTTGTCGAGACTCTTGTGTACTCTCTTAGTCTGTGAGTTTTGGGCGCGTTAGACTTCCACCTGTGTCGTTGCATGACTCGGGACCGTGAACTAGACCTGGTCCGGCTTAGTTGCGTCTTGAGAACGGTTCCTCGCTCCTTATGGATAAGTGGCCTGCTCGTTCTCATGCCAGACGAGCGCTTAGGACTCTGAATTACCTTTATGTCTATGTAAGTCACACGAAGTGGTATCCTTAGGCCATACGAACGGATGATATGCGTTATTTATCAGGCTTTACTCCCTACCTCGCGAGAATCGTGGGTTTAAACACACACCTATGCGGGGGGGTCCAGCAACCCCTATTAACGGAGCTGCCCCATTGTTCCTTAGCCTTAACCCTCTTTAAGAACATGTCAAGAGACTGACCAGCGTGGATCCCAAGCCCTCGGTGGTATACAAATTTATGATAATACTCATGTTGATGATTATAAGTGGATCCCTGCTGCCTTTTTAAACAAATTTCCTGATCTTCTATTACTAGGGACGTGTGTACTCAATGGAGAGGGCACTACCACCACTCCTGTAACCAAAGGCTGTGACGGAAATAGCATCTCGGCTTGTGCACCGACACATGCTCCCCCCCTTCATCCAGGGGCACCCGTTTCCTTCTTGCGTCGAACCCCGCGCTTGCTGCTCTTCATTGCGTAGAGCTGGTTTGTGCACTGGAACGATTGAAACCGTATAGTTTCTCGCTGTATGCAAAATATCGGGGTCAATACCAGAGCGTACGTCACTAGAATTTCTACGTTGCGGCTAACCCTCAGGTCCAAATCTAGCAACTGGTTTACACGCACGGCGTTACGAATACTACGAGTGGCCTCGTCGTGAACGTATAAATAGCGGATGATGTCTTCGCGGGACTCAACACTCGGGTGAGGCATTGTGAAGCGGGAGCACCGGTGGATCGATAACCTCTAAATCGCCTGACCCACAGATTAAGCTAATAGGACCTGTGGGTAGGACCGCAGGAGGCATCTTGTTGCATTTGTGTTACCGTTACTCGGGCTCGTGGCCTTATGTACCTTCGACGCTTTTCACCATGATATCCCTCGCACAATGAATGTGAGATTACTCTAACAATATATGTCGAGCCTCACTAGATGTGGTTTTCCTAAGTCGCCAATAGGTGCTACCCCTACGCATCGCTACATGGGTTTAATGCGACACCGTTTCTTTGCGGAGAAAGTTAAGCTCCCCGGTC");
        // List<String> datas  = new ArrayList<>();
        // Integer length = readFile(datas);
        // reconstraction(datas,length);
    }

    private static void generate(Integer k, String text){
        Integer range = text.length()-k;
        String temp = text.substring(0,text.length());
        List<String> segements = new ArrayList<>();
        for(int i=0;i<=range; i++) {
            String segment = temp.substring(i, k+i);
            segements.add(segment);
            temp = text.substring(0,text.length());
        }
        Collections.sort(segements);
        for(int i =0 ; i< segements.size();i++) {
            System.out.println(segements.get(i));
        }
    }

    private static void reconstraction(List<String> datas, Integer elementLenth){
        String result = datas.get(0);
        for(int i=0;i<datas.size()-1;i++){
            result+=datas.get(i+1).substring(elementLenth-1,elementLenth);
        }
        System.out.println(result);
    }
    public static Integer readFile(List<String> datas) {
        String pathname = "C:\\Users\\noel\\Downloads\\dataset_198_3.txt"; // 绝对路径或相对路径都可以，写入文件时演示相对路径,读取以上路径的input.txt文件
        //防止文件建立或读取失败，用catch捕捉错误并打印，也可以throw;
        //不关闭文件会导致资源的泄露，读写文件都同理
        //Java7的try-with-resources可以优雅关闭文件，异常时自动关闭文件；详细解读https://stackoverflow.com/a/12665271
        Integer length=0;
        try (FileReader reader = new FileReader(pathname);
             BufferedReader br = new BufferedReader(reader) // 建立一个对象，它把文件内容转成计算机能读懂的语言
        ) {
            String line;
            //网友推荐更加简洁的写法
            while ((line = br.readLine()) != null) {
                // 一次读入一行数据
                System.out.println(line);
                datas.add(line);
                length= line.length();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return length;
    }
}
